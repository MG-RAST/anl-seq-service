#!/usr/bin/env python3

# see outline https://docs.google.com/document/d/1ZHgKR3L1z2LFcnN7dpqYyQ9gmyx7A5hPC7Hq6qDTTWY/edit


# Get run_folder, blacklist and target_dir
# Find *.sample-mapping.tsv in run_folder
# for sample in sample-mapping 
#  if site for sample not in blacklist :
#     copy fastq for sample to target_dir

# Import Libraries

import logging
import argparse
import shutil
import os
import sys
import glob


# Command Line Options

def CLI():
    """Define and parse command line options"""
    
    parser = argparse.ArgumentParser(description='Command line options for moving IDPH data to a target directory. Uses *.sample-mapping.tsv file.')
  
    parser.add_argument('--run-dir', dest='run_dir', 
                    help='Directory with fastq for samples in sample-mapping file.')
    parser.add_argument('--target-dir', dest='target_dir', default=None, 
                    help='Destination for fastq files.')
    parser.add_argument('--blacklist', dest='blacklist', default=None, 
                    help='Blacklist file , containes site IDs')
    parser.add_argument('--list', dest='list', default=False, action='store_true' ,
                    help='Do not copy but print list of source files.')
    parser.add_argument('--level', dest='level', default="INFO", choices=['INFO', 'DEBUG', 'WARNING' ,'ERROR', 'CRITICAL'] ,
                    help='Set level of verbosity')
                
    args = parser.parse_args()

    return args


# Find and read sample mapping
# sample id in fisr column and site ID in second column

def get_sample_mapping(run_dir):
    
    samples = {}

    if run_dir and os.path.isdir(run_dir + '/reads/') :
        files = glob.glob(run_dir + '/*.sample-mapping.tsv')
        
        if len(files) == 1 :
            print(files)
            with open(files[0], "r") as f:
                for l in f :
                    columns = l.rstrip("\n").split("\t")
                    prefix = columns[0]
                    site = columns[1]
                    fqs = glob.glob( run_dir + '/reads/' + prefix + "*.fastq*")
                    if len(fqs) == 2 :
                        samples[prefix] = { 
                                                'site' : site ,
                                                'files' : fqs
                                             }                    
                    else:
                        logger.error('Missing files for prefix: %s' , prefix)

        else :
            logger.error("Found to many files: %s" , files)

    else :
        logger.critical("Missing run directory: %s" , str(run_dir))
        sys.exit(404)  

    return samples

# Read Blacklist
# List of site IDs

def get_blacklist(blacklist_file) :
    
    blacklist = {}

    if blacklist_file and os.path.isfile(blacklist_file) :
        with open(blacklist_file, "r") as f:
            for l in f :
                IDs = l.rstrip('\n').split("\t")
                for ID in IDs :
                    blacklist[ID] = 1
        
    else :
        logger.error("Missing blacklist file")  

    return blacklist

# Print file list

def process_list(samples=None, blacklist=None, list=False, target_dir=None):


    copy = False
    if target_dir and os.path.isdir(target_dir) :
        copy=True
    else :
        logger.warning("No valid target directory: %s" , target_dir)

    for s in samples :
        if samples[s]['site'] in blacklist :
            # print( "\t".join([ s , samples[s]['files']]))
            logger.debug("In Blacklist: %s , %s" , s , str(samples[s]['site']))
        else:
            if list :
                for f in samples[s]['files'] :
                    # print( "\t".join([ s , "\t".join(samples[s]['files']) ]))
                    print( "\t".join([ s , f ]))
            else :
                if copy :
                    # logger.info("Copying %s" , s)
                    for f in samples[s]['files'] :
                        shutil.copy(f , target_dir)
                else:
                    pass

# Main

def main(args):

    blacklist = get_blacklist(args.blacklist)
    logger.debug(blacklist)
    samples = get_sample_mapping(args.run_dir)

    process_list(samples=samples, blacklist=blacklist , list=args.list, target_dir=args.target_dir)
   
        


    pass

# Run as executable
# Get command line options, config and run main

if __name__ == '__main__' :

    args = CLI()

    FORMAT = '%(asctime)s %(message)s'
    logging.basicConfig(format=FORMAT)
    
    logger = logging.getLogger(__name__ )
    logger.setLevel(args.level)
    
    # cfg = init( options=args)
    logger.debug(args)
    logger.debug(args.list)
    
   
 


    main(args)