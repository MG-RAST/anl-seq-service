#!/bin/bash

# remove all available files for a given RUN_FOLDER_NAME

# Constants
SHOCK_SERVER="http://shock.metagenomics.anl.gov"
DEBUG=0
UPDATE=0
UPLOAD=0
HELP=0
IMAGE="wilke/anl-seq-service"
TAG=latest
LOG_LEVEL=INFO

# FTP config
FTP_URL="${FTP_URL:-eft.cdc.gov}" 
FTP_DEST="${FTP_DEST:-/Data/Test/}"

if [ -z "${FTP_USER}" ] ; then
    echo Please set FTP_USER, e.g. export FTP_USER=
    exit 1
fi

if [ -z "${FTP_PASSWORD}" ] ; then
    echo Please set FTP_PASSWORD, e.g. export FTP_PASSWORD=
    exit 1
fi




function usage { 
echo "Create RUN and BIOSAMPLE files and upload fastqs"
echo --------------------------------------------------
echo "Usage: $0 [-h <help>] [-u,-p] -r <run folder>"
echo "-d : Dry-run ; debugging"
echo "-u : Update container image"
echo "-p : Push fastqs, RUN and BIOSAMPLE files to sftp"

echo "
Set following environment variables:

export FTP_USER=
export FTP_PASSWORD=
export FTP_URL=
export FTP_DEST=/Data/Prod
"
  }

# get options
while getopts hr:dxup option; do
    case "${option}"
        in
		h) 
            HELP=1
            ;;
		r) RUN_FOLDER=${OPTARG};;
        d) DEBUG=1;;
		x) DELETE=1;;
        u) UPDATE=1;;
        p) UPLOAD=1;;
		*)
		usage
		;;
    esac
done

if [ $HELP -eq 1 ]
then
    usage
    exit 0
fi


#   -h, --help            show this help message and exit
#   --run-template RUN_TEMPLATE
#                         template file for a given run
#   --run-output RUN_OUTPUT
#                         run file, created from --run-template and --sequence-
#                         dir
#   --biosample-template BIOSAMPLE_TEMPLATE
#                         biosample template file for a given run
#   --biosample-output BIOSAMPLE_OUTPUT
#                         biosample file, created from --biosample-template and
#                         --sequence-dir
#   --sites SITES         sites mapping file, contains collected_by and
#                         ww_population
#   --mapping MAPPING     mapping file for constants in specified columns
#   --sequence-dir DIR    directory containing sequences/samples to be included
#                         in the submission file
#   --samples SAMPLES     sample file, contains sample metadata; probably csv
#   --log-level {DEBUG,INFO,WARNINGS,ERROR}
#                         sample file, contains sample metadata; probably csv

# templetes and mapping file are in SRA subfolder of run folder


# Check if absolute path - convert to absolute path
if [ ! "${RUN_FOLDER:0:1}" = "/" ]
then
    RUN_FOLDER=`echo "$(cd "$(dirname "${RUN_FOLDER}")"; pwd)/$(basename "${RUN_FOLDER}")"`
    # echo ${RUN_FOLDER}
fi

RUN=`find ${RUN_FOLDER} -iname "*.run.tmpl.tsv"`

# get run file with sra suffix
if [ -z ${RUN} ]
then 
    RUN=`find ${RUN_FOLDER} -iname "*.sra.tmpl.tsv"`
fi 

BIOSAMPLE=`find ${RUN_FOLDER} -iname "*.biosample.tmpl.tsv"`
SITES=`find ${RUN_FOLDER} -iname "*SiteID*.tsv"`
IDPH=`find ${RUN_FOLDER} -iname "*IDPH.csv"`
CDPH=`find ${RUN_FOLDER} -iname "*CDPH.csv"`

STOP=0 
# Check if only one file has been found
for i in RUN BIOSAMPLE SITES IDPH CDPH
do

    c=`echo ${!i} | wc -w`
    if [ ! $c -eq 1 ]
    then
        STOP=1
        echo ERROR: Found $c files for $i: ${!i}
    fi
done

if [ $STOP -eq 1 ]
then
    exit 1
fi

# Create output file names

BIOSAMPLE_FILE_PATH=`dirname $BIOSAMPLE`
BIOSAMPLE_FILE_DEST=${BIOSAMPLE_FILE_PATH}/`basename -s .tmpl.tsv $BIOSAMPLE`.tsv
RUN_FILE_PATH=`dirname $RUN`
RUN_FILE_DEST=${RUN_FILE_PATH}/`basename -s .tmpl.tsv $RUN`.tsv


if [ ${DEBUG} -eq 1 ]
then
    echo Files:
    echo ------------------------
    echo RUN TEMPLATE:  $RUN
    echo RUN OUTRPUT:   $RUN_DEST
    echo BIOSAM. TMPL:  $BIOSAMPLE
    echo BIOSAM. OUT.:  $BIOSAMPLE_DEST
    echo SITES:         $SITES
    echo IDPH:          $IDPH
    echo CDPH:          $CDPH
    echo
    echo Options:
    echo ------------------------
    echo HELP:      $HELP 
    echo UPDATE:    $UPDATE
    echo UPLOAD:    $UPLOAD
    echo DEBUG:     $DEBUG
    echo RUN_FOL.:  ${RUN_FOLDER} 
    echo 
fi



if [ -f ${IDPH} ]
then
    HEADER=`head -n 1 ${IDPH}`
elif [ -f ${CDPH} ]
then
    HEADER=`head -n 1 ${IDPH}`
else
    echo Missing IDPH of CDPH sample file
fi

echo ${HEADER} > ${RUN_FOLDER}/SRA/samples.csv
SAMPLES=`cat $IDPH $CDPH | grep -v sample_id >> ${RUN_FOLDER}/SRA/samples.csv ; echo ${RUN_FOLDER}/SRA/samples.csv`

DOCKER=`which docker`
SINGULARITY=`which singularity`

if [ ${DEBUG} -eq 1 ]
then
    echo Container:
    echo ------------------------
    echo DOCKER:    ${DOCKER}
    echo SINGUL.:   ${SINGULARITY}
    echo 
fi




if [ ${DEBUG} -eq 1 ]
then
    echo Executing:
    echo ------------------------
fi

if [ ! -z $SINGULARITY ]
then
    if [ ${DEBUG} -eq 1 ]
    then
        echo FOUND ${SINGULARITY} - NOT TESTED
        if [ $UPDATE -eq 1 ]
        then
            echo Updating image
            echo singularity pull docker://${IMAGE}:${TAG} 
        fi
        echo COMMAND: singularity exec --bind $RUN_FOLDER:$RUN_FOLDER docker://${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
            --run-template ${RUN} \
            --run-output ${RUN_FILE_DEST} \
            --biosample-template ${BIOSAMPLE} \
            --biosample-output ${BIOSAMPLE_FILE_DEST} \
            --sites ${SITES} \
            --samples ${SAMPLES} \
            --sequence-dir ${RUN_FOLDER}
        if [ $UPLOAD -eq 1 ]
        then
            echo
            echo UPLOAD: singularity exec --bind $RUN_FOLDER:$RUN_FOLDER docker://${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
            --upload \
            --user ${FTP_USER} \
            --password ${FTP_PASSWORD} \
            --upload-url ${FTP_URL} \
            --upload-dir ${FTP_DEST} \
            --sequence-dir ${RUN_FOLDER} \
            --run-file ${RUN_FILE_DEST} \
            --biosample-file ${BIOSAMPLE_FILE_DEST} \
            --log-level ${LOG_LEVEL}
        fi
    else
        if [ $UPDATE -eq 1 ]
        then
            echo Updating image
            singularity pull docker://${IMAGE}:${TAG} 
        fi
        singularity exec --bind $RUN_FOLDER:$RUN_FOLDER docker://${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
            --run-template ${RUN} \
            --run-output ${RUN_FILE_DEST} \
            --biosample-template ${BIOSAMPLE} \
            --biosample-output ${BIOSAMPLE_FILE_DEST} \
            --sites ${SITES} \
            --samples ${SAMPLES} \
            --sequence-dir ${RUN_FOLDER}
        if [ $UPLOAD -eq 1 ]
        then
            singularity exec --bind $RUN_FOLDER:$RUN_FOLDER docker://${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
            --upload \
            --user ${FTP_USER} \
            --password ${FTP_PASSWORD} \
            --upload-url ${FTP_URL} \
            --upload-dir ${FTP_DEST} \
            --sequence-dir ${RUN_FOLDER} \
            --run-file ${RUN_FILE_DEST} \
            --biosample-file ${BIOSAMPLE_FILE_DEST} \
            --log-level ${LOG_LEVEL}
        fi
 
    fi
elif [ ! -z ${DOCKER} ]
then
    if [ ${DEBUG} -eq 1 ]
    then
        echo FOUND: $DOCKER
        if [ $UPDATE -eq 1 ]
        then
            echo Updating image
            echo docker pull docker://${IMAGE}:${TAG} 
        fi
        echo COMMAND:   ${DOCKER} run -v $RUN_FOLDER:$RUN_FOLDER ${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
        --run-template ${RUN} \
        --run-output ${RUN_FILE_DEST} \
        --biosample-template ${BIOSAMPLE} \
        --biosample-output ${BIOSAMPLE_FILE_DEST} \
        --sites ${SITES} \
        --samples ${SAMPLES} \
        --sequence-dir ${RUN_FOLDER}
        if [ $UPLOAD -eq 1 ]
        then
            echo 
            echo UPLOAD: ${DOCKER} run -v $RUN_FOLDER:$RUN_FOLDER ${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
            --upload \
            --user ${FTP_USER} \
            --password ${FTP_PASSWORD} \
            --upload-url ${FTP_URL} \
            --upload-dir ${FTP_DEST} \
            --sequence-dir ${RUN_FOLDER} \
            --run-file ${RUN_FILE_DEST} \
            --biosample-file ${BIOSAMPLE_FILE_DEST} \
            --log-level ${LOG_LEVEL}
        else
            echo NO UPLOAD
        fi
    else
        if [ $UPDATE -eq 1 ]
        then
            echo Updating image
            docker pull docker://${IMAGE}:${TAG} 
        fi
        ${DOCKER} run -v $RUN_FOLDER:$RUN_FOLDER ${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
        --run-template ${RUN} \
        --run-output ${RUN_FILE_DEST} \
        --biosample-template ${BIOSAMPLE} \
        --biosample-output ${BIOSAMPLE_FILE_DEST} \
        --sites ${SITES} \
        --samples ${SAMPLES} \
        --sequence-dir ${RUN_FOLDER}
        if [ $UPLOAD -eq 1 ]
        then
            ${DOCKER} run -v $RUN_FOLDER:$RUN_FOLDER ${IMAGE}:${TAG} python3 /anl-seq-service/lib/python/SRA.py \
            --upload \
            --user ${FTP_USER} \
            --password ${FTP_PASSWORD} \
            --upload-url ${FTP_URL} \
            --upload-dir ${FTP_DEST} \
            --sequence-dir ${RUN_FOLDER} \
            --run-file ${RUN_FILE_DEST} \
            --biosample-file ${BIOSAMPLE_FILE_DEST} \
            --log-level ${LOG_LEVEL}
        fi
    fi
else
    echo Missing Singularity: ${SINGULARITY}
    echo Missing Docker: ${DOCKER}
fi